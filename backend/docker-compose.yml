services:
  minio:
    image: quay.io/minio/minio:RELEASE.2025-06-13T11-33-47Z
    container_name: ysi-minio
    command: server --console-address ":9001" /data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-ysi_user}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-ysi_minio_password}
      - TZ=${TIMEZONE:-UTC}
    volumes:
      - minio_data:/data
    networks:
      - ysi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: valkey/valkey:8
    container_name: ysi-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-ysi_redis_password} --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ysi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-ysi_redis_password}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  ysi-backend:
    build: .
    container_name: ysi-backend
    ports:
      - "${BACKEND_PORT:-8080}:8000"
    environment:
      # Database configuration (using AWS RDS from .env)
      - DATABASE_URL=${DATABASE_URL}

      # MinIO configuration
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_CONSOLE_PORT=9001
      - MINIO_USER=${MINIO_USER:-ysi_user}
      - MINIO_PASSWORD=${MINIO_PASSWORD:-ysi_minio_password}
      - MINIO_BUCKET=${MINIO_BUCKET:-ysi-storage}

      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-ysi_redis_password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-ysi_redis_password}@redis:6379/0

      # Application configuration from .env
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # CORS configuration from .env
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}

      # RAGFlow configuration from .env
      - RAGFLOW_API_URL=${RAGFLOW_API_URL}
      - RAGFLOW_WEB_URL=${RAGFLOW_WEB_URL}
      - RAGFLOW_API_TOKEN=${RAGFLOW_API_TOKEN}
      - RAGFLOW_TENANT_ID=${RAGFLOW_TENANT_ID}
      - RAGFLOW_ENABLED=${RAGFLOW_ENABLED}
      - RAGFLOW_TIMEOUT=${RAGFLOW_TIMEOUT}
      - RAGFLOW_MAX_RETRIES=${RAGFLOW_MAX_RETRIES}
      - RAGFLOW_CHUNK_SIZE=${RAGFLOW_CHUNK_SIZE}
      - RAGFLOW_OVERLAP=${RAGFLOW_OVERLAP}

      # Other configurations from .env
      - API_V1_STR=${API_V1_STR}
      - PROJECT_NAME=${PROJECT_NAME}

      # Timezone
      - TZ=${TIMEZONE:-UTC}
    depends_on:
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ysi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  minio_data:
    driver: local
  redis_data:
    driver: local

networks:
  ysi-network:
    driver: bridge
